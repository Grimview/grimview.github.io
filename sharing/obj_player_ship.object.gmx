<!--This Document was generated by objShare-->
<object>
  <sprite>&lt;undefined&gt;</sprite>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Action 1 */

/// Declare Variables

acc = 2; // Higher is faster ship speeddw

// Prevent Sprite From Playing
image_speed = 0;

can_fire = true;

/* Action 2 */

/// Attach Exhaust To Ship

with (instance_create(x,y,obj_player_flame_loop)) {
    image_angle = other.direction;
    attached = other.id;
    offset_dir = x - other.x;
    offset_dist_x = x - 40;
    offset_dist_y = y - 287;
    initialAngle = 0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control up animation
// If the player is moving up:
if (keyboard_check(ord("W"))) {
    // If the player is moving down still:
    if (sprite_index = spr_ship_down) {
        // If the moving back to start animation is not finished:
        if (image_index &gt; 0) {
            // Decrement the animation.
            image_index -= 1
            
            // Reset this alarm.
            alarm[2] = room_speed / 2;
        // Else if the moving back to start animation is finished:
        } else {
            // Change the sprite to the up sprite.
            sprite_index = spr_ship_up;
            
            // Increment the animation.
            image_index += 1
            
            // Reset this alarm.
            alarm[2] = room_speed / 2;
        }
    // Else if the player is not moving down:
    } else if (image_index &lt; image_number - 1) {
        // Increment the animation.
        image_index += 1;
        
        // Reset this alarm.
        alarm[2] = room_speed / 2;
    }
// Else if the player is moving back to start animation...
// and not moving down.
} else if !(keyboard_check(ord("S"))) {
    // Check to make sure the ship is going up and not down.
    if (sprite_index == spr_ship_up) {
        // If the moving back to start animation is not finished.
        if (image_index > 0) {
            // Decrement the animation.
            image_index -= 1;
            
            // Reset this alarm.
            alarm[2] = room_speed / 2;
        }
    }
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control down animation
// If the player is moving down:
if (keyboard_check(ord("S"))) {
    // If the player is moving up still:
    if (sprite_index == spr_ship_up) {
        // If the moving back to start animation is not finished:
        if (image_index &gt; 0) {
            // Decrement the animation.
            image_index -= 1
            
            // Reset this alarm.
            alarm[1] = room_speed / 2;
        // Else if the moving back to start animation is finished:
        } else {
            // Change the sprite to the down sprite.
            sprite_index = spr_ship_down;
            
            // Increment the animation.
            image_index += 1
            
            // Reset this alarm.
            alarm[1] = room_speed / 2;
        }
    // Else if the player is not moving up:
    } else if (image_index &lt; image_number - 1) {
        // Increment the animation.
        image_index += 1;
        
        // Reset this alarm.
        alarm[1] = room_speed / 2;
    }
// Else if the player is moving back to start animation...
// and not moving up.
} else if !(keyboard_check(ord("W"))) {
    // Check to make sure the ship is going down and not up.
    if (sprite_index == spr_ship_down) {
        // If the moving back to start animation is not finished.
        if (image_index > 0) {
            // Decrement the animation.
            image_index -= 1;
            
            // Reset this alarm.
            alarm[1] = room_speed / 2;
        }
    }
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_fire = true;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement and tilting

hspeed += acc * (keyboard_check(ord("D")) - keyboard_check(ord("A")));
vspeed += acc * (keyboard_check(ord("S")) - keyboard_check(ord("W")));
speed *= 0.8; // Lower is faster brakeing

if(keyboard_check_pressed(ord("S"))) {
    alarm[1] = 1;
}

if keyboard_check_released(ord('S')) {
    // I don't think the alarm needs to go off here.
    // Hard to tell without testing.
}

if(keyboard_check_pressed(ord("W"))) {
    alarm[2] = 1;
}

if keyboard_check_released(ord('W')) {
    // I don't think the alarm needs to go off here.
    // Hard to tell without testing.
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.1</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.1</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.1</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.2</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
<PhysicsShapePoints/>
</object>
